generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  username      String        @unique
  email         String        @unique
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  passwordHash  String
  messages      Message[]
  notes         Note[]
  memberships   SpaceMember[]
  createdSpaces Space[]       @relation("SpaceCreator")

  @@index([email])
  @@index([username])
  @@map("users")
}

model Space {
  id          String        @id @default(cuid())
  name        String
  description String?
  inviteCode  String        @unique @default(cuid())
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   String
  messages    Message[]
  notes       Note[]
  members     SpaceMember[]
  creator     User          @relation("SpaceCreator", fields: [createdBy], references: [id])

  @@index([createdBy, createdAt(sort: Desc)])
  @@index([isActive, createdAt(sort: Desc)])
  @@map("spaces")
}

model SpaceMember {
  id          String    @id @default(cuid())
  spaceId     String
  userId      String
  roleInSpace SpaceRole @default(MEMBER)
  joinedAt    DateTime  @default(now())
  space       Space     @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([spaceId, userId], name: "unique_space_member")
  @@index([spaceId])
  @@index([userId])
  @@map("space_members")
}

model Message {
  id              String      @id @default(cuid())
  content         String
  messageType     MessageType @default(TEXT)
  threadLevel     Int         @default(0)
  createdAt       DateTime    @default(now())
  spaceId         String
  userId          String
  parentMessageId String?
  parentMessage   Message?    @relation("MessageReplies", fields: [parentMessageId], references: [id])
  replies         Message[]   @relation("MessageReplies")
  space           Space       @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id])

  @@index([spaceId, createdAt(sort: Desc)])
  @@index([parentMessageId, createdAt])
  @@index([userId])
  @@map("messages")
}

model Note {
  id        String   @id @default(cuid())
  spaceId   String
  createdBy String
  title     String
  isPinned  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   Json
  creator   User     @relation(fields: [createdBy], references: [id])
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@index([spaceId, isPinned, createdAt(sort: Desc)])
  @@index([createdBy])
  @@map("notes")
}

enum SpaceRole {
  ADMIN
  MEMBER
}

enum MessageType {
  TEXT
  FILE
  SYSTEM
}
